{"version":3,"names":["clamp","val","min","max","Math","lerp","a","b","amount","round","num","precision","parseFloat","toFixed","toHex","hex","length","Color","constructor","r","g","this","_r","_g","_b","_a","valueOf","luma","Symbol","toPrimitive","hint","toString","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexLookup","Object","fromEntries","entries","map","key","value","rgbHue","v1","v2","vH","hsl2rgb","h","s","l","hsv2rgb","v","vi","floor","v3","rgb2hsl","diff","deltaR","deltaG","deltaB","rgb2hsv","rgba2hex","slice","rgbLumaVlaue","pow","fromCMY","c","m","y","cmy2rgb","fromHexString","string","hexMatch","trim","match","Error","rgb","parseInt","fromHSL","fromHSLString","HSL2Match","HSLA2Match","HSLMatch","HSLAMatch","fromRGBString","RGB2Match","RGBA2Match","RGBMatch","RGBAMatch","contrast","color1","color2","luma1","luma2","dist","hypot","mix","findContrast","minContrast","stepSize","methods","i","method","tempColor","fromCMYK","k","cmyk2cmy","fromHSV","fromRGB","fromString","toLowerCase","substring","multiply","proto","prototype","analogous","r1","g1","b1","r2","g2","b2","complementary","darken","getAlpha","getBrightness","getHue","getSaturation","invert","label","closest","closestDistance","Number","MAX_SAFE_INTEGER","hasOwnProperty","call","color","distance","lighten","palette","shades","tints","tones","setAlpha","setBrightness","_","setHue","setSaturation","shade","Array","fill","index","split","tetradic","r3","g3","b3","tint","toHexString","toHSLString","toRGBString","tone","triadic"],"sources":["../src/helpers.js","../src/color.js","../src/color-names.js","../src/conversions.js","../src/static/create.js","../src/static/utility.js","../src/prototype/manipulation.js","../src/index.js","../src/prototype/schemes.js","../src/prototype/attributes.js","../src/prototype/output.js","../src/prototype/palette.js"],"sourcesContent":["/**\n * Color Helpers\n */\n\n/**\n * Clamp a value between a min and max.\n * @param {number} val The value to clamp.\n * @param {number} [min=0] The minimum value of the clamped range.\n * @param {number} [max=1] The maximum value of the clamped range.\n * @return {number} The clamped value.\n */\nexport const clamp = (val, min = 0, max = 100) => {\n    return Math.max(\n        min,\n        Math.min(max, val),\n    );\n};\n\n/**\n * Linear interpolation from one value to another.\n * @param {number} a The starting value.\n * @param {number} b The ending value.\n * @param {number} amount The amount to interpolate.\n * @return {number} The interpolated value.\n */\nexport const lerp = (a, b, amount) => {\n    const value = a * (1 - amount) + b * amount;\n    return round(value);\n};\n\n/**\n * Round a number to a specified precision.\n * @param {number} num The number to round.\n * @param {number} [precision=2] The precision to use.\n * @return {number} The rounded number.\n */\nexport const round = (num, precision = 2) => {\n    return parseFloat(parseFloat(num).toFixed(precision));\n};\n\n/**\n * Shorten a hex string (if possible).\n * @param {string} hex The hex string.\n * @return {string} The hex string.\n */\nexport const toHex = (hex) => {\n    if (hex.length === 9 &&\n        hex[1] === hex[2] &&\n        hex[3] === hex[4] &&\n        hex[5] === hex[6] &&\n        hex[7] === hex[8]) {\n        return `#${hex[1]}${hex[3]}${hex[5]}${hex[7]}`;\n    }\n\n    if (hex.length === 7 &&\n        hex[1] === hex[2] &&\n        hex[3] === hex[4] &&\n        hex[5] === hex[6]) {\n        return `#${hex[1]}${hex[3]}${hex[5]}`;\n    }\n\n    return hex;\n};\n","\nimport { clamp, round } from './helpers.js';\n\n/**\n * Color class\n * @class\n */\nexport default class Color {\n    /**\n     * New Color constructor.\n     * @param {number} [r=0] The red value, or the brightness value.\n     * @param {number} [g=1] The green value or the alpha value.\n     * @param {null|number} [b=null] The blue value.\n     * @param {number} [a=1] The alpha value.\n     */\n    constructor(r = 0, g = 1, b = null, a = 1) {\n        if (b === null) {\n            a = g;\n            b = g = r = round(r * 2.55);\n        }\n\n        this._r = clamp(r, 0, 255);\n        this._g = clamp(g, 0, 255);\n        this._b = clamp(b, 0, 255);\n        this._a = clamp(a, 0, 1);\n    }\n\n    /**\n     * Return the luminance value of the color.\n     * @return {number} The luminance value. (0, 1)\n     */\n    valueOf() {\n        return this.luma();\n    }\n\n    /**\n     * Return a primitive value of the color.\n     * @param {string} hint The type hint.\n     * @return {string|number} The HTML color string, or the luminance value.\n     */\n    [Symbol.toPrimitive](hint) {\n        return hint === 'number' ?\n            this.valueOf() :\n            this.toString();\n    }\n\n    /**\n     * Get the alpha value of the color.\n     * @return {number} The alpha value. (0, 1)\n     */\n    get a() {\n        return this._a;\n    }\n\n    /**\n     * Get the blue value of the color.\n     * @return {number} The blue value. (0, 255)\n     */\n    get b() {\n        return this._b;\n    }\n\n    /**\n     * Get the green value of the color.\n     * @return {number} The green value. (0, 255)\n     */\n    get g() {\n        return this._g;\n    }\n\n    /**\n     * Get the red value of the color.\n     * @return {number} The red value. (0, 255)\n     */\n    get r() {\n        return this._r;\n    }\n}\n","/**\n * Color Names\n */\n\n// HTML color names\nexport const colors = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgrey: '#a9a9a9',\n    darkgreen: '#006400',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    grey: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgrey: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n};\n\nexport const hexLookup = Object.fromEntries(\n    Object.entries(colors)\n        .map(([key, value]) => [value, key]),\n);\n","import { round } from './helpers.js';\n\n/**\n * Color Conversions\n */\n\n/**\n * Convert CMY color values to RGB.\n * @param {number} c The cyan value. (0, 100)\n * @param {number} m The magenta value. (0, 100)\n * @param {number} y The yellow value. (0, 100)\n * @return {number[]} An array containing the RGB values.\n */\nexport const cmy2rgb = (c, m, y) => {\n    return [\n        round((1 - c / 100) * 255),\n        round((1 - m / 100) * 255),\n        round((1 - y / 100) * 255),\n    ];\n};\n\n/**\n * Convert CMYK color values to CMY.\n * @param {number} c The cyan value. (0, 100)\n * @param {number} m The magenta value. (0, 100)\n * @param {number} y The yellow value. (0, 100)\n * @param {number} k The key value. (0, 100)\n * @return {number[]} An array containing the CMY values.\n */\nexport const cmyk2cmy = (c, m, y, k) => {\n    k /= 100;\n\n    return [\n        round((c / 100 * (1 - k) + k) * 100),\n        round((m / 100 * (1 - k) + k) * 100),\n        round((y / 100 * (1 - k) + k) * 100),\n    ];\n};\n\n/**\n * Calculate the R, G or B value of a hue.\n * @param {number} v1 The first value.\n * @param {number} v2 The second value.\n * @param {number} vH The hue value.\n * @return {number} The R, G or B value.\n */\nconst rgbHue = (v1, v2, vH) => {\n    vH = (vH + 1) % 1;\n\n    if (6 * vH < 1) {\n        return v1 + (v2 - v1) * 6 * vH;\n    }\n\n    if (2 * vH < 1) {\n        return v2;\n    }\n\n    if (3 * vH < 2) {\n        return v1 + (v2 - v1) * ((2 / 3) - vH) * 6;\n    }\n\n    return v1;\n};\n\n/**\n * Convert HSL color values to RGB.\n * @param {number} h The hue value. (0, 360)\n * @param {number} s The saturation value. (0, 100)\n * @param {number} l The lightness value. (0, 100)\n * @return {number[]} An array containing the RGB values.\n */\nexport const hsl2rgb = (h, s, l) => {\n    if (!l) {\n        return [0, 0, 0];\n    }\n\n    h /= 360;\n    s /= 100;\n    l /= 100;\n\n    const v2 = l < .5 ?\n        l * (1 + s) :\n        (l + s) - (s * l);\n    const v1 = 2 * l - v2;\n    const r = rgbHue(v1, v2, h + (1 / 3));\n    const g = rgbHue(v1, v2, h);\n    const b = rgbHue(v1, v2, h - (1 / 3));\n\n    return [\n        round(r * 255),\n        round(g * 255),\n        round(b * 255),\n    ];\n};\n\n/**\n * Convert HSV color values to RGB.\n * @param {number} h The hue value. (0, 360)\n * @param {number} s The saturation value. (0, 100)\n * @param {number} v The brightness value (0, 100)\n * @return {number[]} An array containing the RGB values.\n */\nexport const hsv2rgb = (h, s, v) => {\n    v /= 100;\n\n    if (!s) {\n        return [\n            round(v * 255),\n            round(v * 255),\n            round(v * 255),\n        ];\n    }\n\n    h = (h / 60) % 6;\n    s /= 100;\n\n    const vi = Math.floor(h);\n    const v1 = v * (1 - s);\n    const v2 = v * (1 - s * (h - vi));\n    const v3 = v * (1 - s * (1 - (h - vi)));\n\n    let r; let g; let b;\n\n    switch (vi) {\n        case 0:\n            r = v;\n            g = v3;\n            b = v1;\n            break;\n        case 1:\n            r = v2;\n            g = v;\n            b = v1;\n            break;\n        case 2:\n            r = v1;\n            g = v;\n            b = v3;\n            break;\n        case 3:\n            r = v1;\n            g = v2;\n            b = v;\n            break;\n        case 4:\n            r = v3;\n            g = v1;\n            b = v;\n            break;\n        default:\n            r = v;\n            g = v1;\n            b = v2;\n            break;\n    }\n\n    return [\n        round(r * 255),\n        round(g * 255),\n        round(b * 255),\n    ];\n};\n\n/**\n * Convert RGB color values to HSL.\n * @param {number} r The red value. (0, 255)\n * @param {number} g The green value. (0, 255)\n * @param {number} b The blue value. (0, 255)\n * @return {number[]} An array containing the HSL values.\n */\nexport const rgb2hsl = (r, g, b) => {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const diff = max - min;\n    const l = (max + min) / 2;\n\n    if (!diff) {\n        return [\n            0,\n            0,\n            round(l * 100),\n        ];\n    }\n\n    const s = l < .5 ?\n        diff / (max + min) :\n        diff / (2 - max - min);\n    const deltaR = (((max - r) / 6) + (diff / 2)) / diff;\n    const deltaG = (((max - g) / 6) + (diff / 2)) / diff;\n    const deltaB = (((max - b) / 6) + (diff / 2)) / diff;\n\n    let h = 0;\n\n    switch (max) {\n        case r:\n            h = deltaB - deltaG;\n            break;\n        case g:\n            h = 1 / 3 + deltaR - deltaB;\n            break;\n        case b:\n            h = 2 / 3 + deltaG - deltaR;\n            break;\n    }\n\n    h = (h + 1) % 1;\n\n    return [\n        round(h * 360),\n        round(s * 100),\n        round(l * 100),\n    ];\n};\n\n/**\n * Convert RGB color values to HSV.\n * @param {number} r The red value. (0, 255)\n * @param {number} g The green value. (0, 255)\n * @param {number} b The blue value. (0, 255)\n * @return {number[]} An array containing the HSV values.\n */\nexport const rgb2hsv = (r, g, b) => {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n    const diff = max - min;\n    const v = max;\n\n    if (!diff) {\n        return [\n            0,\n            0,\n            round(v * 100),\n        ];\n    }\n\n    const s = diff / max;\n    const deltaR = (((max - r) / 6) + (diff / 2)) / diff;\n    const deltaG = (((max - g) / 6) + (diff / 2)) / diff;\n    const deltaB = (((max - b) / 6) + (diff / 2)) / diff;\n\n    let h = 0;\n\n    switch (max) {\n        case r:\n            h = deltaB - deltaG;\n            break;\n        case g:\n            h = 1 / 3 + deltaR - deltaB;\n            break;\n        case b:\n            h = 2 / 3 + deltaG - deltaR;\n            break;\n    }\n\n    h = (h + 1) % 1;\n\n    return [\n        round(h * 360),\n        round(s * 100),\n        round(v * 100),\n    ];\n};\n\n/**\n * Convert RGBA color values to hex.\n * @param {number} r The red value. (0, 255)\n * @param {number} g The green value. (0, 255)\n * @param {number} b The blue value. (0, 255)\n * @param {number} a The alpha value. (0, 1)\n * @return {string} The hex string.\n */\nexport const rgba2hex = (r, g, b, a) => {\n    [r, g, b] = [r, g, b].map(\n        (value) => (Math.round(value) | 1 << 8)\n            .toString(16)\n            .slice(1),\n    );\n    const hex = `#${r}${g}${b}`;\n\n    if (a >= 1) {\n        return hex;\n    }\n\n    return hex +\n        (Math.round(a * 255) | 1 << 8)\n            .toString(16)\n            .slice(1);\n};\n\n/**\n * Calculate the relative R, G or B value for luma calculation.\n * @param {number} v The value.\n * @return {number} The R, G or B value.\n */\nconst rgbLumaVlaue = (v) => {\n    v /= 255;\n\n    if (v <= .03928) {\n        return v / 12.92;\n    }\n\n    return Math.pow(((v + .055) / 1.055), 2.4);\n};\n\n/**\n * Calculate the relative luminance of an RGB color.\n * @param {number} r The red value. (0, 255)\n * @param {number} g The green value. (0, 255)\n * @param {number} b The blue value. (0, 255)\n * @return {number} The relative luminance value.\n */\nexport const rgbLuma = (r, g, b) => {\n    r = rgbLumaVlaue(r);\n    g = rgbLumaVlaue(g);\n    b = rgbLumaVlaue(b);\n\n    return (.2126 * r) + (.7152 * g) + (.0722 * b);\n};\n","import Color from './../color.js';\nimport { colors } from './../color-names.js';\nimport { cmy2rgb, cmyk2cmy, hsl2rgb, hsv2rgb } from './../conversions.js';\n\n/**\n * Color (Static) Creation\n */\n\n/**\n * Create a new Color from CMY values.\n * @param {number} c The cyan value. (0, 100)\n * @param {number} m The magenta value. (0, 100)\n * @param {number} y The yellow value. (0, 100)\n * @param {number} [a=1] The alpha value. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function fromCMY(c, m, y, a = 1) {\n    const [r, g, b] = cmy2rgb(c, m, y);\n    return new Color(r, g, b, a);\n};\n\n/**\n * Create a new Color from CMYK values.\n * @param {number} c The cyan value. (0, 100)\n * @param {number} m The magenta value. (0, 100)\n * @param {number} y The yellow value. (0, 100)\n * @param {number} k The key value. (0, 100)\n * @param {number} [a=1] The alpha value. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function fromCMYK(c, m, y, k, a = 1) {\n    [c, m, y] = cmyk2cmy(c, m, y, k);\n    return fromCMY(c, m, y, a);\n};\n\n/**\n * Create a new Color from a hex color string.\n * @param {string} string The hex color string.\n * @return {Color} A new Color object.\n */\nexport function fromHexString(string) {\n    string = string.trim();\n\n    const hexMatch = string.length > 6 ?\n        string.match(/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i) :\n        string.match(/^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f]?)$/i);\n\n    if (!hexMatch) {\n        throw new Error('Invalid hex string');\n    }\n\n    const rgb = hexMatch.slice(1, 5).map((value) =>\n        value ?\n            parseInt(\n                value.length == 2 ?\n                    value :\n                    value + value,\n                16,\n            ) :\n            null,\n    );\n\n    return new Color(rgb[0],\n        rgb[1],\n        rgb[2],\n        rgb[3] ?\n            rgb[3] / 255 :\n            1,\n    );\n};\n\n/**\n * Create a new Color from HSL values.\n * @param {number} h The hue value. (0, 360)\n * @param {number} s The saturation value. (0, 100)\n * @param {number} l The lightness value. (0, 100)\n * @param {number} [a=1] The alpha value. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function fromHSL(h, s, l, a = 1) {\n    const [r, g, b] = hsl2rgb(h, s, l);\n    return new Color(r, g, b, a);\n};\n\n/**\n * Create a new Color from a HSL color string.\n * @param {string} string The HSL color string.\n * @return {Color} A new Color object.\n */\nexport function fromHSLString(string) {\n    string = string.trim();\n\n    const HSL2Match = string.match(/^hsl\\(((?:\\d*\\.)?\\d+)deg\\s+((?:\\d*\\.)?\\d+)\\%\\s+((?:\\d*\\.)?\\d+)\\%\\)$/i);\n\n    if (HSL2Match) {\n        return fromHSL(HSL2Match[1], HSL2Match[2], HSL2Match[3]);\n    }\n\n    const HSLA2Match = string.match(/^hsl\\(((?:\\d*\\.)?\\d+)deg\\s+((?:\\d*\\.)?\\d+)\\%\\s+((?:\\d*\\.)?\\d+)\\%\\s*\\/\\s*((?:\\d*\\.)?\\d+)(\\%?)\\)$/i);\n\n    if (HSLA2Match) {\n        return fromHSL(\n            HSLA2Match[1],\n            HSLA2Match[2],\n            HSLA2Match[3],\n            HSLA2Match[5] ?\n                HSLA2Match[4] / 100 :\n                HSLA2Match[4],\n        );\n    }\n\n    const HSLMatch = string.match(/^hsl\\(((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+)\\%,\\s*((?:\\d*\\.)?\\d+)\\%\\)$/i);\n\n    if (HSLMatch) {\n        return fromHSL(HSLMatch[1], HSLMatch[2], HSLMatch[3]);\n    }\n\n    const HSLAMatch = string.match(/^hsla\\(((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+)\\%,\\s*((?:\\d*\\.)?\\d+)\\%,\\s*((?:\\d*\\.)?\\d+)(\\%?)\\)$/i);\n\n    if (HSLAMatch) {\n        return fromHSL(\n            HSLAMatch[1],\n            HSLAMatch[2],\n            HSLAMatch[3],\n            HSLAMatch[5] ?\n                HSLAMatch[4] / 100 :\n                HSLAMatch[4],\n        );\n    }\n\n    throw new Error('Invalid HSL string');\n};\n\n/**\n * Create a new Color from HSV values.\n * @param {number} h The hue value. (0, 360)\n * @param {number} s The saturation value. (0, 100)\n * @param {number} v The brightness value. (0, 100)\n * @param {number} [a=1] The alpha value. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function fromHSV(h, s, v, a = 1) {\n    const [r, g, b] = hsv2rgb(h, s, v);\n    return new Color(r, g, b, a);\n};\n\n/**\n * Create a new Color from RGB values.\n * @param {number} r The red value. (0, 255)\n * @param {number} g The green value. (0, 255)\n * @param {number} b The blue value. (0, 255)\n * @param {number} [a=1] The alpha value. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function fromRGB(r, g, b, a = 1) {\n    return new Color(r, g, b, a);\n};\n\n/**\n * Create a new Color from a RGB color string.\n * @param {string} string The RGB color string.\n * @return {Color} A new Color object.\n */\nexport function fromRGBString(string) {\n    string = string.trim();\n\n    const RGB2Match = string.match(/^rgb\\(((?:\\d*\\.)?\\d+)\\s+((?:\\d*\\.)?\\d+)\\s+((?:\\d*\\.)?\\d+)\\)$/i);\n\n    if (RGB2Match) {\n        return new Color(RGB2Match[1], RGB2Match[2], RGB2Match[3]);\n    }\n\n    const RGBA2Match = string.match(/^rgb\\(((?:\\d*\\.)?\\d+)\\s+((?:\\d*\\.)?\\d+)\\s+((?:\\d*\\.)?\\d+)\\s*\\/\\s*((?:\\d*\\.)?\\d+)(\\%?)\\)$/i);\n\n    if (RGBA2Match) {\n        return new Color(\n            RGBA2Match[1],\n            RGBA2Match[2],\n            RGBA2Match[3],\n            RGBA2Match[5] ?\n                RGBA2Match[4] / 100 :\n                RGBA2Match[4],\n        );\n    }\n\n    const RGBMatch = string.match(/^rgb\\(((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+)\\)$/i);\n\n    if (RGBMatch) {\n        return new Color(RGBMatch[1], RGBMatch[2], RGBMatch[3]);\n    }\n\n    const RGBAMatch = string.match(/^rgba\\(((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+),\\s*((?:\\d*\\.)?\\d+)(\\%?)\\)$/i);\n\n    if (RGBAMatch) {\n        return new Color(\n            RGBAMatch[1],\n            RGBAMatch[2],\n            RGBAMatch[3],\n            RGBAMatch[5] ?\n                RGBAMatch[4] / 100 :\n                RGBAMatch[4],\n        );\n    }\n\n    throw new Error('Invalid RGB string');\n};\n\n/**\n * Create a new Color from a HTML color string.\n * @param {string} string The HTML color string.\n * @return {Color} A new Color object.\n */\nexport function fromString(string) {\n    string = string.toLowerCase().trim();\n\n    if (string === 'transparent') {\n        return new Color(0, 0, 0, 0);\n    }\n\n    if (string in colors) {\n        string = colors[string];\n    }\n\n    if (string.substring(0, 1) === '#') {\n        return fromHexString(string);\n    }\n\n    if (string.substring(0, 3).toLowerCase() === 'rgb') {\n        return fromRGBString(string);\n    }\n\n    if (string.substring(0, 3).toLowerCase() === 'hsl') {\n        return fromHSLString(string);\n    }\n\n    throw new Error('Invalid color string');\n};\n","import Color from './../color.js';\nimport { lerp } from './../helpers.js';\n\n/**\n * Color (Static) Utility\n */\n\n/**\n * Get the contrast value between two colors.\n * @param {Color} color1 The first Color.\n * @param {Color} color2 The second Color.\n * @return {number} The contrast value. (1, 21)\n */\nexport const contrast = (color1, color2) => {\n    const luma1 = color1.luma();\n    const luma2 = color2.luma();\n\n    return (Math.max(luma1, luma2) + .05) / (Math.min(luma1, luma2) + .05);\n};\n\n/**\n * Calculate the distance between two colors.\n * @param {Color} color1 The first Color.\n * @param {Color} color2 The second Color.\n * @return {number} The distance between the colors.\n */\nexport const dist = (color1, color2) => {\n    return Math.hypot(color1.r - color2.r, color1.g - color2.g, color1.b - color2.b);\n};\n\n/**\n * Find an optimally contrasting color for another color.\n * @param {Color} color1 The first Color.\n * @param {Color} [color2] The second Color.\n * @param {object} [options] The options for finding the contrasting color.\n * @param {number} [options.minContrast=4.5] The minimum contrast.\n * @param {number} [options.stepSize=.01] The step size.\n * @return {Color} The new Color.\n */\nexport const findContrast = (color1, color2 = null, { minContrast = 4.5, stepSize = .01 } = {}) => {\n    if (!color2) {\n        color2 = color1;\n    }\n\n    if (contrast(color1, color2) >= minContrast) {\n        return color2;\n    }\n\n    const methods = ['tint', 'shade'];\n    for (let i = stepSize; i <= 1; i += stepSize) {\n        for (const method of methods) {\n            const tempColor = color2[method](i);\n            if (contrast(color1, tempColor) >= minContrast) {\n                return tempColor;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * Create a new Color by mixing two colors together by a specified amount.\n * @param {Color} color1 The first Color.\n * @param {Color} color2 The second Color.\n * @param {number} amount The amount to mix them by. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function mix(color1, color2, amount) {\n    const r = lerp(color1.r, color2.r, amount);\n    const g = lerp(color1.g, color2.g, amount);\n    const b = lerp(color1.b, color2.b, amount);\n\n    return new Color(r, g, b);\n};\n\n/**\n * Create a new Color by multiplying two colors together by a specified amount.\n * @param {Color} color1 The first Color.\n * @param {Color} color2 The second Color.\n * @param {number} amount The amount to multiply them by. (0, 1)\n * @return {Color} A new Color object.\n */\nexport function multiply(color1, color2, amount) {\n    const r = lerp(color1.r, color1.r * color2.r / 255, amount);\n    const g = lerp(color1.g, color1.g * color2.g / 255, amount);\n    const b = lerp(color1.b, color1.b * color2.b / 255, amount);\n\n    return new Color(r, g, b);\n};\n","import Color from './../color.js';\nimport { hsl2rgb, rgb2hsl } from './../conversions.js';\nimport { mix } from './../static/utility.js';\n\n/**\n * Color Manipulation\n */\n\nconst white = new Color(100);\nconst grey = new Color(50);\nconst black = new Color(0);\n\n/**\n * Darken the color by a specified amount.\n * @param {number} amount The amount to darken the color by. (0, 1)\n * @return {Color} The darkened Color object.\n */\nexport function darken(amount) {\n    let [h, s, l] = rgb2hsl(this.r, this.g, this.b);\n    l -= l * amount;\n    const [r, g, b] = hsl2rgb(h, s, l);\n\n    return new Color(r, g, b, this.a);\n};\n\n/**\n * Invert the color.\n * @return {Color} The inverted Color object.\n */\nexport function invert() {\n    return new Color(\n        255 - this.r,\n        255 - this.g,\n        255 - this.b,\n        this.a,\n    );\n};\n\n/**\n * Lighten the color by a specified amount.\n * @param {number} amount The amount to lighten the color by. (0, 1)\n * @return {Color} The lightened Color object.\n */\nexport function lighten(amount) {\n    let [h, s, l] = rgb2hsl(this.r, this.g, this.b);\n    l += (100 - l) * amount;\n    const [r, g, b] = hsl2rgb(h, s, l);\n\n    return new Color(r, g, b, this.a);\n};\n\n/**\n * Shade the color by a specified amount.\n * @param {number} amount The amount to shade the color by. (0, 1)\n * @return {Color} The shaded Color object.\n */\nexport function shade(amount) {\n    return mix(this, black, amount);\n};\n\n/**\n * Tint the color by a specified amount.\n * @param {number} amount The amount to tint the color by. (0, 1)\n * @return {Color} The tinted Color object.\n */\nexport function tint(amount) {\n    return mix(this, white, amount);\n};\n\n/**\n * Tone the color by a specified amount.\n * @param {number} amount The amount to tone the color by. (0, 1)\n * @return {Color} The toned Color object.\n */\nexport function tone(amount) {\n    return mix(this, grey, amount);\n};\n","import Color from './color.js';\nimport { fromCMY, fromCMYK, fromHexString, fromHSL, fromHSLString, fromHSV, fromRGB, fromRGBString, fromString } from './static/create.js';\nimport { contrast, dist, findContrast, mix, multiply } from './static/utility.js';\nimport { getAlpha, getBrightness, getHue, getSaturation, luma, setAlpha, setBrightness, setHue, setSaturation } from './prototype/attributes.js';\nimport { darken, invert, lighten, shade, tint, tone } from './prototype/manipulation.js';\nimport { label, toHexString, toHSLString, toRGBString, toString } from './prototype/output.js';\nimport { palette, shades, tints, tones } from './prototype/palette.js';\nimport { analogous, complementary, split, tetradic, triadic } from './prototype/schemes.js';\n\nColor.contrast = contrast;\nColor.dist = dist;\nColor.findContrast = findContrast;\nColor.fromCMY = fromCMY;\nColor.fromCMYK = fromCMYK;\nColor.fromHexString = fromHexString;\nColor.fromHSL = fromHSL;\nColor.fromHSLString = fromHSLString;\nColor.fromHSV = fromHSV;\nColor.fromRGB = fromRGB;\nColor.fromRGBString = fromRGBString;\nColor.fromString = fromString;\nColor.mix = mix;\nColor.multiply = multiply;\n\nconst proto = Color.prototype;\n\nproto.analogous = analogous;\nproto.complementary = complementary;\nproto.darken = darken;\nproto.getAlpha = getAlpha;\nproto.getBrightness = getBrightness;\nproto.getHue = getHue;\nproto.getSaturation = getSaturation;\nproto.invert = invert;\nproto.label = label;\nproto.lighten = lighten;\nproto.luma = luma;\nproto.palette = palette;\nproto.setAlpha = setAlpha;\nproto.setBrightness = setBrightness;\nproto.setHue = setHue;\nproto.setSaturation = setSaturation;\nproto.shade = shade;\nproto.shades = shades;\nproto.split = split;\nproto.tetradic = tetradic;\nproto.tint = tint;\nproto.tints = tints;\nproto.toHexString = toHexString;\nproto.toHSLString = toHSLString;\nproto.toRGBString = toRGBString;\nproto.toString = toString;\nproto.tone = tone;\nproto.tones = tones;\nproto.triadic = triadic;\n\nexport default Color;\n","import Color from './../color.js';\nimport { hsv2rgb, rgb2hsv } from './../conversions.js';\n\n/**\n * Color Schemes\n */\n\n/**\n * Create an array with 2 analogous color variations.\n * @return {Color[]} An array containing 2 analogous color variations.\n */\nexport function analogous() {\n    const [h, s, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r1, g1, b1] = hsv2rgb(h + 30, s, v);\n    const [r2, g2, b2] = hsv2rgb(h - 30, s, v);\n\n    return [\n        new Color(r1, g1, b1, this.a),\n        new Color(r2, g2, b2, this.a),\n    ];\n};\n\n/**\n * Create a complementary color variation.\n * @return {Color} A complementary color variation.\n */\nexport function complementary() {\n    const [h, s, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r, g, b] = hsv2rgb(h + 180, s, v);\n\n    return new Color(r, g, b, this.a);\n};\n\n/**\n * Create an array with 2 split color variations.\n * @return {Color[]} An array containing 2 split color variations.\n */\nexport function split() {\n    const [h, s, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r1, g1, b1] = hsv2rgb(h + 150, s, v);\n    const [r2, g2, b2] = hsv2rgb(h - 150, s, v);\n\n    return [\n        new Color(r1, g1, b1, this.a),\n        new Color(r2, g2, b2, this.a),\n    ];\n};\n\n/**\n * Create an array with 3 tetradic color variations.\n * @return {Color[]} An array containing 3 tetradic color variations.\n */\nexport function tetradic() {\n    const [h, s, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r1, g1, b1] = hsv2rgb(h + 60, s, v);\n    const [r2, g2, b2] = hsv2rgb(h + 180, s, v);\n    const [r3, g3, b3] = hsv2rgb(h - 120, s, v);\n\n    return [\n        new Color(r1, g1, b1, this.a),\n        new Color(r2, g2, b2, this.a),\n        new Color(r3, g3, b3, this.a),\n    ];\n};\n\n/**\n * Create an array with 2 triadic color variations.\n * @return {Color[]} An array containing 2 triadic color variations.\n */\nexport function triadic() {\n    const [h, s, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r1, g1, b1] = hsv2rgb(h + 120, s, v);\n    const [r2, g2, b2] = hsv2rgb(h - 120, s, v);\n\n    return [\n        new Color(r1, g1, b1, this.a),\n        new Color(r2, g2, b2, this.a),\n    ];\n};\n","import Color from './../color.js';\nimport { hsv2rgb, rgb2hsv, rgbLuma } from './../conversions.js';\n\n/**\n * Color Attributes\n */\n\n\n/**\n * Get the alpha value of the color.\n * @return {number} The alpha value. (0, 1)\n */\nexport function getAlpha() {\n    return this.a;\n};\n\n/**\n * Get the brightness value of the color.\n * @return {number} The brightness value. (0, 100)\n */\nexport function getBrightness() {\n    return rgb2hsv(this.r, this.g, this.b)[2];\n};\n\n/**\n * Get the hue value of the color.\n * @return {number} The hue value. (0, 360)\n */\nexport function getHue() {\n    return rgb2hsv(this.r, this.g, this.b)[0];\n};\n\n/**\n * Get the saturation value of the color.\n * @return {number} The saturation value. (0, 100)\n */\nexport function getSaturation() {\n    return rgb2hsv(this.r, this.g, this.b)[1];\n};\n\n/**\n * Get the relative luminance value of the color\n * @return {number} The relative luminance value. (0, 1)\n */\nexport function luma() {\n    return rgbLuma(this.r, this.g, this.b);\n};\n\n/**\n * Set the alpha value of the color.\n * @param {number} a The alpha value. (0, 1)\n * @return {Color} The modified Color object.\n */\nexport function setAlpha(a) {\n    return new Color(this.r, this.g, this.b, a);\n};\n\n/**\n * Set the brightness value of the color.\n * @param {number} v The brightness value. (0, 100)\n * @return {Color} The modified Color object.\n */\nexport function setBrightness(v) {\n    const [h, s, _] = rgb2hsv(this.r, this.g, this.b);\n    const [r, g, b] = hsv2rgb(h, s, v);\n\n    return new Color(r, g, b, this.a);\n};\n\n/**\n * Set the hue value of the color.\n * @param {number} h The hue value. (0, 360)\n * @return {Color} The modified Color object.\n */\nexport function setHue(h) {\n    const [_, s, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r, g, b] = hsv2rgb(h, s, v);\n\n    return new Color(r, g, b, this.a);\n};\n\n/**\n * Set the saturation value of the color.\n * @param {number} s The saturation value. (0, 100)\n * @return {Color} The modified Color object.\n */\nexport function setSaturation(s) {\n    const [h, _, v] = rgb2hsv(this.r, this.g, this.b);\n    const [r, g, b] = hsv2rgb(h, s, v);\n\n    return new Color(r, g, b, this.a);\n};\n","import { colors, hexLookup } from './../color-names.js';\nimport { toHex } from './../helpers.js';\nimport { rgb2hsl, rgba2hex } from './../conversions.js';\nimport { fromHexString } from './../static/create.js';\nimport { dist } from './../static/utility.js';\n\n/**\n * Get the closest color name for the color.\n * @return {string} The name.\n */\nexport function label() {\n    let closest;\n    let closestDistance = Number.MAX_SAFE_INTEGER;\n\n    for (const label in colors) {\n        if (!{}.hasOwnProperty.call(colors, label)) {\n            continue;\n        }\n\n        const color = fromHexString(colors[label]);\n        const distance = dist(this, color);\n\n        if (distance < closestDistance) {\n            closest = label;\n            closestDistance = distance;\n        }\n    }\n\n    return closest;\n};\n\n/**\n * Return a hexadecimal string representation of the color.\n * @return {string} The hexadecimal string.\n */\nexport function toHexString() {\n    const hex = rgba2hex(this.r, this.g, this.b, this.a);\n\n    return toHex(hex);\n};\n\n/**\n * Return a HSL/HSLA string representation of the color.\n * @return {string} The HSL/HSLA string.\n */\nexport function toHSLString() {\n    let [h, s, l] = rgb2hsl(this.r, this.g, this.b);\n\n    h = Math.round(h);\n    s = Math.round(s);\n    l = Math.round(l);\n    const a = Math.round(this.a * 100);\n\n    if (a < 100) {\n        return `hsl(${h}deg ${s}% ${l}% / ${a}%)`;\n    }\n\n    return `hsl(${h}deg ${s}% ${l}%)`;\n};\n\n/**\n * Return a RGB/RGBA string representation of the color.\n * @return {string} The RGB/RGBA string.\n */\nexport function toRGBString() {\n    const r = Math.round(this.r);\n    const g = Math.round(this.g);\n    const b = Math.round(this.b);\n    const a = Math.round(this.a * 100);\n\n    if (a < 100) {\n        return `rgb(${r} ${g} ${b} / ${a}%)`;\n    }\n\n    return `rgb(${r} ${g} ${b})`;\n};\n\n/**\n * Return a HTML string representation of the color.\n * @return {string} The HTML color string.\n */\nexport function toString() {\n    if (!this.a) {\n        return 'transparent';\n    }\n\n    if (this.a < 1) {\n        return this.toRGBString();\n    }\n\n    const hex = rgba2hex(this.r, this.g, this.b, this.a);\n\n    if (hex in hexLookup) {\n        return hexLookup[hex];\n    }\n\n    return toHex(hex);\n};\n","/**\n * Color Palette\n */\n\n/**\n * Create a palette object with a specified number of shades, tints and tone variations.\n * @param {object} [options] The options for generating a palette.\n * @param {number} [options.shades=10] The number of shades to generate.\n * @param {number} [options.tints=10] The number of tints to generate.\n * @param {number} [options.tones=10] The number of tones to generate.\n * @return {object} A palette object.\n */\nexport function palette({ shades = 10, tints = 10, tones = 10 } = {}) {\n    return {\n        shades: this.shades(shades),\n        tints: this.tints(tints),\n        tones: this.tones(tones),\n    };\n};\n\n/**\n * Create an array with a specified number of shade variations.\n * @param {number} [shades=10] The number of shades to generate.\n * @return {Color[]} An array containing shade variations.\n */\nexport function shades(shades = 10) {\n    return new Array(shades)\n        .fill()\n        .map(\n            (_, index) => this.shade(index / (shades + 1)),\n        );\n};\n\n/**\n * Create an array with a specified number of tint variations.\n * @param {number} [tints=10] The number of tints to generate.\n * @return {Color[]} An array containing tint variations.\n */\nexport function tints(tints = 10) {\n    return new Array(tints)\n        .fill()\n        .map(\n            (_, index) => this.tint(index / (tints + 1)),\n        );\n};\n\n/**\n * Create an array with a specified number of tone variations.\n * @param {number} [tones=10] The number of tones to generate.\n * @return {Color[]} An array containing tone variations.\n */\nexport function tones(tones = 10) {\n    return new Array(tones)\n        .fill()\n        .map(\n            (_, index) => this.tone(index / (tones + 1)),\n        );\n};\n"],"mappings":"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","ignoreList":[]}